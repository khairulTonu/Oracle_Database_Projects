
DROP TABLE POLICY_HOLDER CASCADE CONSTRAINTS;
DROP TABLE PAYMENT CASCADE CONSTRAINTS;
DROP TABLE POLICY CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE BRANCH CASCADE CONSTRAINTS;

CREATE TABLE BRANCH(
BRANCH_ID INT,
BRANCH_NAME VARCHAR(25),
BRANCH_CITY VARCHAR(25)
);


CREATE TABLE CUSTOMER(
CUSTOMER_ID INT,
CUSTOMER_NAME VARCHAR(20),
EMAIL_ID VARCHAR(20),
GENDER VARCHAR(8),
DATE_OF_BIRTH DATE,
MARRITAL_STATUS VARCHAR(10),
ADDRESS VARCHAR(50),
OPENING_DATE DATE,
CONTACT_NO VARCHAR(12)
);

CREATE TABLE POLICY_HOLDER(
CUSTOMER_ID INT,
BRANCH_ID INT
);

CREATE TABLE POLICY(
INSURANCE_ID INT,
INSURANCE_NAME VARCHAR(20),
NOMINEE_NAME VARCHAR(20),
NOMINEE_RELATION VARCHAR(10),
CONTRACT_DATE DATE,
SUM_ASSURED NUMBER(10,2),
INSURANCE_PERIOD NUMBER(3),
PREMIUM_PAYMENT_METHOD VARCHAR(10),
CUSTOMER_ID INT,
BRANCH_ID INT
);

CREATE TABLE PAYMENT(
RECEIPT_NO NUMBER(12),
RECEIPT_DATE VARCHAR(20),
TOTAL_AMOUNT NUMBER(10,2),
PAYMENT_LATENESS NUMBER(4),
FINE NUMBER(8,2),
PREMIUM_LEFT NUMBER(4),
INSURANCE_ID INT
);


--LAB-3 ALTERATION

--ADDING PRIMARY KEYS AND FOREIGN KEYS TO THE TABLES

ALTER TABLE BRANCH ADD PRIMARY KEY (BRANCH_ID);

ALTER TABLE CUSTOMER ADD PRIMARY KEY (CUSTOMER_ID);

ALTER TABLE POLICY_HOLDER ADD FOREIGN KEY(BRANCH_ID) REFERENCES BRANCH ON DELETE CASCADE;

ALTER TABLE POLICY_HOLDER ADD FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER ON DELETE CASCADE;

ALTER TABLE POLICY ADD PRIMARY KEY (INSURANCE_ID);

ALTER TABLE POLICY ADD FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER ON DELETE CASCADE;

ALTER TABLE POLICY ADD FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH ON DELETE CASCADE;

ALTER TABLE PAYMENT ADD PRIMARY KEY (RECEIPT_NO);

ALTER TABLE PAYMENT ADD FOREIGN KEY(INSURANCE_ID) REFERENCES POLICY ON DELETE CASCADE;

--REMOVE COLUMN

ALTER TABLE PAYMENT DROP COLUMN PREMIUM_LEFT;

--RENAME COLUMN

ALTER TABLE POLICY RENAME COLUMN INSURANCE_PERIOD TO INSURANCE_PERIOD_YEARS;

--MODIFY COLUMNS

ALTER TABLE PAYMENT MODIFY RECEIPT_DATE DATE;

ALTER TABLE POLICY MODIFY SUM_ASSURED NUMBER(10,2) CHECK (SUM_ASSURED>=40000 AND SUM_ASSURED<=1000000);

--DESCRIBE TABLES

DESCRIBE BRANCH;

DESCRIBE CUSTOMER;

DESCRIBE POLICY_HOLDER;

DESCRIBE POLICY;

DESCRIBE PAYMENT;


--DATA INSERTION ON BRANCH TABLE

INSERT INTO BRANCH VALUES (100,'MIRPUR-2','DHAKA');

INSERT INTO BRANCH VALUES (200,'KALURGHAT','CHITTAGONG');

INSERT INTO BRANCH VALUES (300,'NEW MARKET','KHULNA');

INSERT INTO BRANCH VALUES (400,'BORO BAZAR','MYMNESINGH');

INSERT INTO BRANCH VALUES (500,'SUBID BAZAR','SYLHET');


--DATA INSERTION ON CUSTOMER TABLE

INSERT INTO CUSTOMER VALUES (1001,'SAKIB AHMED','sakib123@gmail.com','MALE','15-MAY-1981','MARRID','MIRPUR-2,DHAKA,BANGLADESH','05-MAR-2014','01673123456');

INSERT INTO CUSTOMER VALUES (1102,'SHAHINA KHANAM','shahina21@gmail.com','FEMALE','11-MAR-1985','MARRID','GULSHAN-2,DHAKA,BANGLADESH','06-APR-2014','01773453456');

INSERT INTO CUSTOMER VALUES (1514,'SHARIF MAHMUD','sharif54@gmail.com','MALE','25-DEC-1983','MARRID','CHITTAGONG,BANGLADESH','02-MAY-2015','01876543210');

INSERT INTO CUSTOMER VALUES (1881,'HAFIZ ALI','hafiz1990@gmail.com','MALE','19-JAN-1990','MARRID','SYLHET,BANGLADESH','03-OCT-2015','01551236578');

INSERT INTO CUSTOMER VALUES (2249,'AFROZA YESMIN','afroza25@gmail.com','FEMALE','25-AUG-1988','MARRID','BOUNDARY ROAD,MYMENSINGH,BANGLADESH','01-FEB-2016','01720879564');


--DATA INSERTION ON POLICY TABLE

INSERT INTO POLICY VALUES (50002,'LIFE INSURANCE','AMENA AKHTER','WIFE','05-MAR-2014',240000,10,'MONTHLY',1001,100);

INSERT INTO POLICY VALUES (60042,'HEALTH INSURANCE','ISHTIAQ HOSSAIN','SON','06-APR-2014',270000,15,'MONTHLY',1102,200);

INSERT INTO POLICY VALUES (60130,'HEALTH INSURANCE','JEBIN SULTANA','DAUGHTER','05-MAY-2015',216000,12,'MONTHLY',1001,300);

INSERT INTO POLICY VALUES (70302,'EDUCATION INSURANCE','SELIM HOSSAIN','SON','05-JUN-2015',120000,10,'MONTHLY',1514,400);

INSERT INTO POLICY VALUES (50315,'LIFE INSURANCE','IMTIAZ AHMED','SON','05-MAR-2016',288000,12,'MONTHLY',2249,500);

INSERT INTO POLICY VALUES (70428,'EDUCATION INSURANCE','SHAHID HASAN','BROTHER','01-JAN-2017',156000,13,'MONTHLY',2249,200);

INSERT INTO POLICY VALUES (70518,'LIFE INSURANCE','SHAHID HASAN','BROTHER','01-JAN-2016',216000,12,'MONTHLY',1881,100);



--DATA INSERTION ON PAYMENT TABLE

INSERT INTO PAYMENT VALUES (50314013,'05-MAR-2014',2000,NULL,0.00,50002);
INSERT INTO PAYMENT VALUES (70414018,'07-APR-2014',2000,NULL,0.00,50002);
INSERT INTO PAYMENT VALUES (30514003,'03-MAY-2014',2000,NULL,0.00,50002);

INSERT INTO PAYMENT VALUES (60414023,'06-APR-2014',1500,NULL,0.00,60042);
INSERT INTO PAYMENT VALUES (40514013,'04-MAY-2014',1500,NULL,0.00,60042);
INSERT INTO PAYMENT VALUES (80614023,'08-APR-2014',1500,NULL,0.00,60042);

INSERT INTO PAYMENT VALUES (50515010,'05-MAY-2015',1500,NULL,0.00,60130);
INSERT INTO PAYMENT VALUES (50615015,'05-JUN-2015',1500,NULL,0.00,60130);
INSERT INTO PAYMENT VALUES (70715019,'07-JUL-2015',1500,NULL,0.00,60130);

INSERT INTO PAYMENT VALUES (50615017,'05-JUN-2015',1000,NULL,0.00,70302);
INSERT INTO PAYMENT VALUES (70715052,'07-JUL-2015',1000,NULL,0.00,70302);
INSERT INTO PAYMENT VALUES (40815011,'04-AUG-2015',1000,NULL,0.00,70302);

INSERT INTO PAYMENT VALUES (50316027,'05-MAR-2016',2000,NULL,0.00,50315);
INSERT INTO PAYMENT VALUES (20416022,'02-APR-2016',2000,NULL,0.00,50315);
INSERT INTO PAYMENT VALUES (80516030,'08-MAY-2016',2000,NULL,0.00,50315);

INSERT INTO PAYMENT VALUES (10116015,'01-JAN-2016',1000,NULL,0.00,70428);
INSERT INTO PAYMENT VALUES (40216017,'04-FEB-2016',1000,NULL,0.00,70428);
INSERT INTO PAYMENT VALUES (50316011,'05-MAR-2016',1000,NULL,0.00,70428);

INSERT INTO POLICY_HOLDER VALUES (1001,100);
INSERT INTO POLICY_HOLDER VALUES (1001,300);
INSERT INTO POLICY_HOLDER VALUES (1102,200);
INSERT INTO POLICY_HOLDER VALUES (1514,400);
INSERT INTO POLICY_HOLDER VALUES (2249,500);
INSERT INTO POLICY_HOLDER VALUES (1881,200);


--FIND TOTAL AMOUNT GIVEN BY A CUSTOMER

SET SERVEROUTPUT ON
ACCEPT z NUMBER prompt 'Please enter an CUSTOMER ID: '

DECLARE

CURSOR INS_CUR IS SELECT INSURANCE_ID FROM POLICY;

INSURANCE_RECORD INS_CUR%ROWTYPE;

CUS_ID POLICY.CUSTOMER_ID%TYPE;
INS_ID PAYMENT.INSURANCE_ID%TYPE;
GIVEN_PREMIUM PAYMENT.TOTAL_AMOUNT%TYPE;
TOTAL PAYMENT.TOTAL_AMOUNT%TYPE;


BEGIN
CUS_ID:=&z;
TOTAL:=0;
OPEN INS_CUR;
LOOP
FETCH INS_CUR INTO INSURANCE_RECORD WHERE CUST_ID=CUSTOMER_ID;
EXIT WHEN INS_CUR%ROWCOUNT>6;

SELECT SUM(TOTAL_AMOUNT) INTO GIVEN_PREMIUM FROM PAYMENT WHERE INSURANCE_RECORD.INSURANCE_ID=INS_ID;
TOTAL:=TOTAL+GIVEN_PREMIUM;
END LOOP;
CLOSE INS_CUR;
DBMS_OUTPUT.PUT_LINE('TOTAL:' || TOTAL);

END;
/




--DELETE ONE ROW

DELETE FROM CUSTOMER WHERE CUSTOMER_ID=1881;

SELECT * FROM BRANCH;

SELECT * FROM CUSTOMER;

SELECT * FROM POLICY;

SELECT * FROM PAYMENT;


SELECT CUSTOMER_ID AS VIP_CUSTOMERS FROM POLICY WHERE SUM_ASSURED>250000;

SELECT CUSTOMER_ID,INSURANCE_ID,INSURANCE_NAME,SUM_ASSURED,BRANCH_ID FROM POLICY ORDER BY SUM_ASSURED DESC;

SELECT DISTINCT (BRANCH_ID) FROM POLICY;


--LAB-4

SELECT CUSTOMER_ID,INSURANCE_ID,INSURANCE_NAME FROM POLICY WHERE SUM_ASSURED>=200000 AND SUM_ASSURED<=300000;

SELECT CUSTOMER_ID,INSURANCE_ID,INSURANCE_NAME,NOMINEE_NAME,NOMINEE_RELATION FROM POLICY WHERE INSURANCE_NAME='LIFE INSURANCE' OR INSURANCE_NAME='EDUCATION INSURANCE';

SELECT CUSTOMER_ID,INSURANCE_ID,INSURANCE_NAME,NOMINEE_NAME,NOMINEE_RELATION FROM POLICY WHERE INSURANCE_NAME LIKE '%HEALTH INSURANCE%';

SELECT CUSTOMER_ID,INSURANCE_ID,INSURANCE_NAME,SUM_ASSURED FROM POLICY WHERE SUM_ASSURED BETWEEN 40000 AND 150000;

SELECT CUSTOMER_ID,INSURANCE_ID,BRANCH_ID,INSURANCE_NAME,SUM_ASSURED FROM POLICY WHERE BRANCH_ID IN(100,200);  


--AGGREGATE FUNCTIONS

SELECT COUNT(CUSTOMER_ID) FROM CUSTOMER;

SELECT SUM(SUM_ASSURED) FROM POLICY WHERE BRANCH_ID=100;

SELECT MAX(SUM_ASSURED) FROM POLICY;

SELECT AVG(SUM_ASSURED) FROM POLICY WHERE INSURANCE_NAME='LIFE INSURANCE';


--GROUP CLAUSE

SELECT COUNT(CUSTOMER_ID),INSURANCE_NAME FROM POLICY GROUP BY INSURANCE_NAME;

SELECT INSURANCE_ID,COUNT(CUSTOMER_ID) FROM POLICY GROUP BY INSURANCE_ID HAVING INSURANCE_ID>=60000;


--LAB-5

--SUBQUERY

SELECT CUSTOMER_ID,CUSTOMER_NAME,ADDRESS FROM CUSTOMER WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID FROM POLICY WHERE INSURANCE_NAME='LIFE INSURANCE');

--UNION

SELECT CUSTOMER_ID,CUSTOMER_NAME FROM CUSTOMER WHERE GENDER='MALE' UNION SELECT c.CUSTOMER_ID,c.CUSTOMER_NAME FROM CUSTOMER c WHERE c.CUSTOMER_NAME IN
	(SELECT o.CUSTOMER_NAME FROM CUSTOMER o,POLICY e WHERE o.CUSTOMER_ID=e.CUSTOMER_ID AND INSURANCE_NAME='EDUCATION INSURANCE');

--UNION ALL

SELECT CUSTOMER_ID,CUSTOMER_NAME FROM CUSTOMER WHERE GENDER='MALE' UNION ALL SELECT c.CUSTOMER_ID,c.CUSTOMER_NAME FROM CUSTOMER c WHERE c.CUSTOMER_NAME IN
	(SELECT o.CUSTOMER_NAME FROM CUSTOMER o,POLICY e WHERE o.CUSTOMER_ID=e.CUSTOMER_ID AND INSURANCE_NAME='EDUCATION INSURANCE');


--INTERSECT

SELECT CUSTOMER_ID,CUSTOMER_NAME FROM CUSTOMER WHERE GENDER='MALE' INTERSECT SELECT c.CUSTOMER_ID,c.CUSTOMER_NAME FROM CUSTOMER c WHERE c.CUSTOMER_NAME IN
	(SELECT o.CUSTOMER_NAME FROM CUSTOMER o,POLICY e WHERE o.CUSTOMER_ID=e.CUSTOMER_ID AND INSURANCE_NAME='EDUCATION INSURANCE');
	

--MINUS

SELECT CUSTOMER_ID,CUSTOMER_NAME FROM CUSTOMER WHERE GENDER='MALE' MINUS SELECT c.CUSTOMER_ID,c.CUSTOMER_NAME FROM CUSTOMER c WHERE c.CUSTOMER_NAME IN
	(SELECT o.CUSTOMER_NAME FROM CUSTOMER o,POLICY e WHERE o.CUSTOMER_ID=e.CUSTOMER_ID AND INSURANCE_NAME='EDUCATION INSURANCE');



--LAB 6


--INNER JOIN

SELECT c.CUSTOMER_ID,c.CUSTOMER_NAME,p.INSURANCE_ID,p.INSURANCE_NAME,p.SUM_ASSURED FROM CUSTOMER c,POLICY p WHERE c.CUSTOMER_ID=p.CUSTOMER_ID;

SELECT c.CUSTOMER_ID,c.CUSTOMER_NAME,c.ADDRESS,p.BRANCH_ID FROM CUSTOMER c,POLICY_HOLDER p WHERE c.CUSTOMER_ID=p.CUSTOMER_ID;


--USING

SELECT CUSTOMER_ID,c.CUSTOMER_NAME,p.INSURANCE_ID,p.INSURANCE_NAME,p.SUM_ASSURED FROM CUSTOMER c JOIN POLICY p USING(CUSTOMER_ID);


--NATURAL JOIN

SELECT CUSTOMER_ID,CUSTOMER_NAME,INSURANCE_ID,INSURANCE_NAME,SUM_ASSURED FROM CUSTOMER NATURAL JOIN POLICY;


--LEFT OUTER JOIN

SELECT c.CUSTOMER_ID,c.CUSTOMER_NAME,p.INSURANCE_ID,p.INSURANCE_NAME,p.SUM_ASSURED FROM CUSTOMER c LEFT OUTER JOIN POLICY p ON c.CUSTOMER_ID=p.CUSTOMER_ID;

SELECT p.CUSTOMER_ID,p.INSURANCE_ID,p.INSURANCE_NAME,p.SUM_ASSURED,y.RECEIPT_NO,y.RECEIPT_DATE FROM POLICY p LEFT OUTER JOIN PAYMENT y ON p.INSURANCE_ID=y.INSURANCE_ID;


--RIGHT OUTER JOIN

SELECT p.CUSTOMER_ID,p.INSURANCE_ID,p.INSURANCE_NAME,p.SUM_ASSURED,y.RECEIPT_NO,y.RECEIPT_DATE FROM POLICY p RIGHT OUTER JOIN PAYMENT y ON p.INSURANCE_ID=y.INSURANCE_ID;


--LAB-7

--PL SQL

--FIND THE MAXIMUM PREMIUM

SET SERVEROUTPUT ON

DECLARE
ID CUSTOMER.CUSTOMER_ID%TYPE;
MAX_PREMIUM POLICY.SUM_ASSURED%TYPE;

BEGIN
SELECT MAX(SUM_ASSURED) INTO MAX_PREMIUM FROM POLICY;
SELECT CUSTOMER_ID INTO ID FROM POLICY WHERE SUM_ASSURED=MAX_PREMIUM;
DBMS_OUTPUT.PUT_LINE('ID : ' || ID || ' PREMIUM: '|| MAX_PREMIUM);

END;
/

--APPLY THE DISCOUNTS ON PREMIUM USING IF ELSE

SET SERVEROUTPUT ON
ACCEPT x NUMBER prompt 'Please enter a INSURANCE ID: '
DECLARE

PREMIUM POLICY.SUM_ASSURED%TYPE;
DISCOUNT_PREMIUM POLICY.SUM_ASSURED%TYPE;
CUST_ID POLICY.CUSTOMER_ID%TYPE;
INS_ID POLICY.INSURANCE_ID%TYPE;
INSURANCE_TYPE POLICY.INSURANCE_NAME%TYPE;

BEGIN

INS_ID:=&x;

SELECT SUM_ASSURED INTO PREMIUM FROM POLICY WHERE INSURANCE_ID=INS_ID;

SELECT CUSTOMER_ID INTO CUST_ID FROM POLICY WHERE INSURANCE_ID=INS_ID;

SELECT INSURANCE_NAME INTO INSURANCE_TYPE FROM POLICY WHERE INSURANCE_ID=INS_ID;


IF PREMIUM<100000 THEN
	DISCOUNT_PREMIUM:=PREMIUM;
	
ELSIF PREMIUM>=100000 AND PREMIUM<=150000 THEN
	DISCOUNT_PREMIUM:=PREMIUM-(PREMIUM*0.05);
	
ELSIF PREMIUM>150000 AND PREMIUM<=200000 THEN
	DISCOUNT_PREMIUM:=PREMIUM-(PREMIUM*0.07);

ELSE
	DISCOUNT_PREMIUM:=PREMIUM-(PREMIUM*0.10);
	
	END IF;
	

DBMS_OUTPUT.PUT_LINE(CHR(10)||CHR(10)||'CUSTOMER_ID: '||CUST_ID||'	INSURANCE: '||INSURANCE_TYPE||CHR(10)||
 'PREMIUM:'||PREMIUM||CHR(10)||'DISCOUNT PREMIUM: '||DISCOUNT_PREMIUM);


EXCEPTION
         WHEN others THEN
	      DBMS_OUTPUT.PUT_LINE (SQLERRM);

END;
/

--LAB 8

--FIND THE CUSTOMERS ID, NAME USING CURSOR

SET SERVEROUTPUT ON

DECLARE

CURSOR CUSTOMER_CUR IS SELECT CUSTOMER_ID,CUSTOMER_NAME FROM CUSTOMER;

CUSTOMER_RECORD CUSTOMER_CUR%ROWTYPE;

BEGIN

OPEN CUSTOMER_CUR;
LOOP
FETCH CUSTOMER_CUR INTO CUSTOMER_RECORD;
EXIT WHEN CUSTOMER_CUR%ROWCOUNT>3;

DBMS_OUTPUT.PUT_LINE('ID: '||CUSTOMER_RECORD.CUSTOMER_ID||' NAME: '||CUSTOMER_RECORD.CUSTOMER_NAME);

END LOOP;

CLOSE CUSTOMER_CUR;

END;
/


--PROCEDURE

--GETTING BRANCH_ID,BRANCH_NAME CORRESPONDING TO CUSTOMER_ID USING PROCEDURE

SET SERVEROUTPUT ON
ACCEPT y NUMBER prompt 'Please enter a CUSTOMER ID: '

CREATE OR REPLACE PROCEDURE GET_BRANCH IS
CUST_ID POLICY_HOLDER.CUSTOMER_ID%TYPE;
BRANCHID POLICY_HOLDER.BRANCH_ID%TYPE;
BRANCHNAME BRANCH.BRANCH_NAME%TYPE;

BEGIN

CUST_ID:=&y;

SELECT BRANCH_ID INTO BRANCHID FROM POLICY_HOLDER WHERE CUSTOMER_ID=CUST_ID;

SELECT BRANCH_NAME INTO BRANCHNAME FROM BRANCH WHERE BRANCH_ID=BRANCHID;


DBMS_OUTPUT.PUT_LINE('ID: '||CUST_ID||' BRANCH ID: '||BRANCHID||' BRANCH NAME: '||BRANCHNAME);

END;
/

BEGIN
GET_BRANCH;
END;
/

--GETTING PREMIUM,GIVEN PREMIUM,REMAINING PREMIUM,REMAINING_INSTALLMENT USING PROCEDURE

SET SERVEROUTPUT ON
ACCEPT z NUMBER prompt 'Please enter an INSURANCE ID: '

CREATE OR REPLACE PROCEDURE GET_DETAILS IS
INS_ID PAYMENT.INSURANCE_ID%TYPE;
PREMIUM POLICY.SUM_ASSURED%TYPE;
GIVEN_PREMIUM PAYMENT.TOTAL_AMOUNT%TYPE;
REMAINING_PREMIUM PAYMENT.TOTAL_AMOUNT%TYPE;
TOTAL_INSTALLMENT POLICY.INSURANCE_PERIOD_YEARS%TYPE;
REMAINING_INSTALLMENT POLICY.INSURANCE_PERIOD_YEARS%TYPE;
GIVEN_INSTALLMENT POLICY.INSURANCE_PERIOD_YEARS%TYPE;

BEGIN

INS_ID:=&z;


SELECT SUM(TOTAL_AMOUNT) INTO GIVEN_PREMIUM FROM PAYMENT WHERE INSURANCE_ID=INS_ID;

SELECT SUM_ASSURED INTO PREMIUM FROM POLICY WHERE INSURANCE_ID=INS_ID;

REMAINING_PREMIUM:=PREMIUM-GIVEN_PREMIUM;

SELECT INSURANCE_PERIOD_YEARS INTO TOTAL_INSTALLMENT FROM POLICY WHERE INSURANCE_ID=INS_ID;

SELECT COUNT(INSURANCE_ID) INTO GIVEN_INSTALLMENT FROM PAYMENT WHERE INSURANCE_ID=INS_ID;

TOTAL_INSTALLMENT:=TOTAL_INSTALLMENT*12;

REMAINING_INSTALLMENT:=TOTAL_INSTALLMENT-GIVEN_INSTALLMENT;

DBMS_OUTPUT.PUT_LINE('ID: '||INS_ID||CHR(10)||'PREMIUM: '||PREMIUM||CHR(10)||
'GIVEN PREMIUM: '||GIVEN_PREMIUM||CHR(10)||'REMAINING PREMIUM: '||REMAINING_PREMIUM||CHR(10)||
'REMAINING INSTALLMENT: '||REMAINING_INSTALLMENT);

END;
/

BEGIN
GET_DETAILS;
END;
/

--FUNCTION

--CALCULATING AGE FROM CUSTOMER'S DATE_OF_BIRTH USING FUNCTION

SET SERVEROUTPUT ON
ACCEPT p NUMBER prompt 'Please enter an CUSTOMER ID: '

CREATE OR REPLACE FUNCTION GET_AGE RETURN NUMBER IS

AGE NUMBER(4);
BIRTHDATE CUSTOMER.DATE_OF_BIRTH%TYPE;
CUST_ID CUSTOMER.CUSTOMER_ID%TYPE;

BEGIN

CUST_ID:=&p;

SELECT DATE_OF_BIRTH INTO BIRTHDATE FROM CUSTOMER WHERE CUSTOMER_ID=CUST_ID;

SELECT (SYSDATE-BIRTHDATE)/365 INTO AGE FROM CUSTOMER WHERE CUSTOMER_ID=CUST_ID;

RETURN AGE;

END;
/

SET SERVEROUTPUT ON;
BEGIN
DBMS_OUTPUT.PUT_LINE('CUSTOMER AGE: '||GET_AGE);
END;
/



--LAB 9

--USING TRIGGER

--CALCULATING FINE ON THE BASIS OF PAYMENT LATENESS(DATE) OR DELAY(DATE) FROM THE DUE DATE;

CREATE OR REPLACE TRIGGER TR_FINE
BEFORE UPDATE OR INSERT ON PAYMENT
FOR EACH ROW

BEGIN

IF :NEW.PAYMENT_LATENESS>=30 THEN
:NEW.FINE:=500.00;

ELSIF :NEW.PAYMENT_LATENESS>=15 AND :NEW.PAYMENT_LATENESS<30 THEN
:NEW.FINE:=300.00;

ELSIF :NEW.PAYMENT_LATENESS>=8 AND :NEW.PAYMENT_LATENESS<15 THEN
:NEW.FINE:=150.00;

ELSIF :NEW.PAYMENT_LATENESS<8 THEN
:NEW.FINE:=0;

END IF;
END TR_FINE;
/


INSERT INTO PAYMENT VALUES (160714023,'16-JUL-2014',1500,10,NULL,60042);
INSERT INTO PAYMENT VALUES (190514013,'19-AUG-2014',1500,18,NULL,60042);
INSERT INTO PAYMENT VALUES (111014023,'11-OCT-2014',1500,35,NULL,60042);

SELECT * FROM PAYMENT;


--SYSTEM DATE

SELECT SYSDATE FROM DUAL;

--CURRENT DATE

SELECT CURRENT_DATE FROM DUAL;

--DATE TIME

SELECT SYSTIMESTAMP FROM DUAL;

--TRANSACTION

INSERT INTO CUSTOMER VALUES (1005,'ADNAN AHMED','adnan123@gmail.com','MALE','15-MAY-1985','MARRID','GULSHAN-2,DHAKA,BANGLADESH','05-JUN-2017','01673166879');

SAVEPOINT CUS1;

INSERT INTO CUSTOMER VALUES (1107,'SALMA AKTER','salma21@gmail.com','FEMALE','11-AUG-1988','MARRID','BOUNDARY ROAD,MYMENSINGH,BANGLADESH','06-APR-2014','01773453456');

SAVEPOINT CUS2;

ROLLBACK TO SAVEPOINT CUS1;

SELECT * FROM CUSTOMER;


--EXTRACT YEAR FROM DATE_OF_BIRTH OF CUSTOMERS

SELECT CUSTOMER_ID,CUSTOMER_NAME,EXTRACT(YEAR FROM DATE_OF_BIRTH) AS BIRTH_YEAR FROM CUSTOMER;

--EXTRACT YEAR FROM OPENING_DATE OF CUSTOMERS

SELECT CUSTOMER_ID,CUSTOMER_NAME,EXTRACT(YEAR FROM OPENING_DATE) AS OPENING_POLICY_YEAR FROM CUSTOMER;


COMMIT;
















